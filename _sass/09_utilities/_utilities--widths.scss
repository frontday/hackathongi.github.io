
/* -------------------------------------------------------------------------
 * WIDTHS
 *
 * Generates a series of utility classes that give a fluid width to
 * whichever element theyâ€™re applied, combining the fractions numbers, e.g.:
 *
 *   <img src="" alt="" class="u-1/2" />
 *
 * These classes are most commonly used in conjunction with objects, e.g.:
 *
 *   <div class="o-layout__item  u-1/2">
 *
 * By default, will also generate responsive variants of each of these
 * classes by using your Sass MQ configuration, e.g.:
 *
 *   <div class="o-layout__item  u-1/1  u-1/2@sm  u-1/3@lg">
 *
 * Optionally, offset classes can br generated which can push and pull
 * elements left and right by a specified amount, e.g.:
 *
 *   <div class="o-layout__item  u-2/3  u-pull-1/3">
 *
 * This is useful for making very granular changes to the rendered order of
 * items in a layout.
 *
 * N.B. This option is turned off by default.
 */

$u-widths-fractions:                    1 2 3 4 5 !default;
$u-widths-include-bp:                   true !default;
$u-widths-bp:                           $s-breakpoints !default;
$u-widths-include-offset-push:          false !default;
$u-widths-include-offset-pull:          false !default;


// Utility mixin
// --------------------------------------------------

@mixin utilities-widths($columns, $breakpoint: null) {

  // Loop through the number of columns for each denominator of our fractions.
  @each $denominator in $columns {

    // Begin creating a numerator for our fraction up until we hit the
    // denominator.
    @for $numerator from 1 through $denominator {

      // Skip if values are the same (excepting 1/1)
      @if ($numerator != $denominator or $denominator == 1 ) {

        // Build a class in the format `.u-3/4[@<breakpoint>]`.
        .u-#{$numerator}\/#{$denominator}#{$breakpoint} {
          width: ($numerator / $denominator) * 100% !important;
        }


        // Build the offsets classes if needed.
        /**
        * 1. Defensively reset any leftover or conflicting `left`/`right` values.
        */
        @if ($u-widths-include-offset-push) {
          // Build a class in the format `.u-push-1/2[@<breakpoint>]`.
          .u-push-#{$numerator}\/#{$denominator}#{$breakpoint} {
            position: relative;
            right: auto; /* [1] */
            left: ($numerator / $denominator) * 100% !important;
          }
        }
        @if ($u-widths-include-offset-pull) {
          // Build a class in the format `.u-pull-5/6[@<breakpoint>]`.
          .u-pull-#{$numerator}\/#{$denominator}#{$breakpoint} {
            position: relative;
            right: ($numerator / $denominator) * 100% !important;
            left: auto; /* [1] */
          }
        }

      }

    }

  }

}


// Build classes
// --------------------------------------------------

@include utilities-widths($u-widths-fractions);


// Build classes with BP suffixes
// --------------------------------------------------

@if ($u-widths-include-bp) {
  @if (variable-exists(u-widths-bp)) {
    @each $bp-name, $bp-value in $u-widths-bp {
      @if ($bp-value != 0) {
        @include mq($from: $bp-name) {
          @include utilities-widths($u-widths-fractions, \@#{$bp-name});
        }
      }
    }
  }
}
